AWSTemplateFormatVersion: 2010-09-09

Resources:
    LambdaRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                - 
                    Effect: "Allow"
                    Principal: 
                        Service: 
                            - "lambda.amazonaws.com"
                            - "comprehend.amazonaws.com"
                            - "apigateway.amazonaws.com"
                    Action: 
                        - "sts:AssumeRole"
            Policies:
                - PolicyName: ComprehendDataAccessRolePolicy
                  PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            - Effect: Allow
                              Action: 
                                - 's3:GetObject'
                                - 's3:ListBucket'
                                - 's3:PutObject'
                              Resource:
                                - 'arn:aws:s3:::*Comprehend*'
                                - 'arn:aws:s3:::*comprehend*'
                - PolicyName: AmazonS3FullAccess
                  PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            - Effect: Allow
                              Action: 
                                - 's3:*' 
                                - 's3-object-lambda:*' 
                              Resource: '*'
            RoleName: LambdaRole

    SentimentFunction:
        Type: AWS::Lambda::Function
        Properties: 
            Code:
                ZipFile: |
                    import boto3
            
                    client = boto3.client('comprehend')
                    
                    def lambda_handler(event, context):
                        result = {
                            "Sentiment": client.detect_sentiment(Text = event['inputTranscript'], LanguageCode='en')['Sentiment'],
                            "SentimentScore": client.detect_sentiment(Text = event['inputTranscript'], LanguageCode='en')['SentimentScore']
                        }
                        return result
            Handler: lambda_function.lambda_handler
            Role: !GetAtt LambdaRole.Arn
            Runtime: 'python3.9'

    SentimentGateway:
      Type: AWS::ApiGateway::RestApi
      Properties: 
        ApiKeySourceType: HEADER
        EndpointConfiguration:
          Types:
            - REGIONAL
        Name: SentimentAnalysisAPI

    SentimentGatewayResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt SentimentGateway.RootResourceId
        PathPart: 'analysis'
        RestApiId: !Ref SentimentGateway

    ApiGatewayMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: false
        AuthorizationType: NONE
        HttpMethod: GET
        Integration:
          Credentials: !GetAtt LambdaRole.Arn
          IntegrationHttpMethod: GET
          RequestTemplates:
            application/json : '{"inputTranscript": "I want something"}'
          Type: AWS
          Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SentimentFunction.Arn}/invocations'
        OperationName: 'lambda'
        ResourceId: !Ref SentimentGatewayResource
        RestApiId: !Ref SentimentGateway