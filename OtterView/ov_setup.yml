AWSTemplateFormatVersion: 2010-09-09

Parameters:
  OtterviewAPIName:
    Type: String
    Default: OtterviewAPI

  OtterviewAPIStageName:
    Type: String
    AllowedPattern: '[a-z0-9]+'
    Default: prod

  RetrieveItemsFunctionName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+'
    Default: RetrieveItems

  OVWebsiteName:
    Type: String
    Default: otterview.com
  
Resources:

  ###################################################################################
  ###################################### VIEW #######################################
  ###################################################################################

  AmplifyRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Effect: 'Allow'
          Principal: 
            Service: 
              - 'amplify.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess-Amplify'
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
      RoleName: AmplifyRole

  Amplify:
    Type: "AWS::Amplify::App"
    Properties:
      Name: "ov-amplify"
      Repository: "https://github.com/swen-514-614-spr-2023-2/team-3"
      AccessToken: "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"
      EnvironmentVariables:
        - Name: "AMPLIFY_MONOREPO_APP_ROOT"
          Value: "otterview-frontend"
        - Name: "AMPLIFY_DIFF_DEPLOY"
          Value: false
        - Name: "_LIVE_UPDATES"
          Value: '[{"name":"Amplify CLI","pkg":"@aws-amplify/cli","type":"npm","version":"latest"}]'
      IAMServiceRole: !GetAtt AmplifyRole.Arn

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt Amplify.AppId
      BranchName: main
      EnableAutoBuild: true
      Stage: PRODUCTION

  AmplifyDomain:
    Type: AWS::Amplify::Domain
    Properties:
      DomainName: !Ref OVWebsiteName
      AppId: !GetAtt Amplify.AppId
      SubDomainSettings:
        - Prefix: main
          BranchName: !GetAtt AmplifyBranch.BranchName

  ###################################################################################
  ################################### CONTROLLER ####################################
  ###################################################################################

  OtterviewAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref OtterviewAPIName

  GetRetrieveItemsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RetrieveItemsFunction.Arn}/invocations"
      ResourceId: !GetAtt OtterviewAPI.RootResourceId
      RestApiId: !Ref OtterviewAPI

  OtterviewAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetRetrieveItemsMethod
    Properties:
      RestApiId: !Ref OtterviewAPI
      StageName: !Ref OtterviewAPIStageName

  RetrieveItemsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
            import boto3
            import json
            from decimal import Decimal
            class DecimalEncoder(json.JSONEncoder):
                def default(self, obj):
                    if isinstance(obj, Decimal):
                        return float(obj)
                    return super(DecimalEncoder, self).default(obj)
            dynamodb = boto3.resource('dynamodb')
            def lambda_handler(event, context):
                table = dynamodb.Table('ov-database')
                response = table.scan()
                data = response['Items']
                while response.get('LastEvaluatedKey'):
                    response = table.scan(ExclusiveStartKey=response['LastEvaluatedKey'])
                    data.extend(response['Items'])
                return {
                    'statusCode': 200,
                    'headers': {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Headers': '*',
                        'Access-Control-Allow-Methods': 'GET',
                        'Access-Control-Allow-Origin': '*'
                    },
                    'body': json.dumps(data, cls=DecimalEncoder)
                }
      FunctionName: !Ref RetrieveItemsFunctionName
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9

  OtterviewApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RetrieveItemsFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OtterviewAPI}/${OtterviewAPIStageName}/GET/

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: "LambdaDynamoDBPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan" # <-- Added permission for scanning the table
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ov-database"
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RetrieveItemsFunctionName}:*
          PolicyName: lambda

  ###################################################################################
  ##################################### MODEL #######################################
  ###################################################################################

  OVLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: OVIAMRole
    Properties:
      FunctionName: ov-lambda
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt OVIAMRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import logging
          import time
          from io import StringIO
          from datetime import datetime, timezone, timedelta
          import dateutil.parser
          import http.client
          import urllib.parse

          comprehend = boto3.client('comprehend')
          dynamodb = boto3.client('dynamodb')

          # the token for my specific Twitter dev account
          BEARER_TOKEN = 'AAAAAAAAAAAAAAAAAAAAAKzrlgEAAAAAht6dzPN67U8IuexfSMWN279WB4c%3DyYf2sq8wgmczA0jFyhL14x5zk2QEvDpkietkahQDoiHQuAks7V'

          def get_tweets(event):    
              now = datetime.now(timezone.utc)
              now = now - timedelta(seconds=60)
              start_time = now.astimezone().replace(microsecond=0).isoformat()
              params = {'query': '#' + event,
                      'start_time': start_time,
                      'tweet.fields': 'text,created_at',
                      'max_results': 100}
              headers = {'Authorization': 'Bearer ' + BEARER_TOKEN}
              conn = http.client.HTTPSConnection("api.twitter.com")
              query_string = urllib.parse.urlencode(params)
              conn.request("GET", "/2/tweets/search/recent?"+ query_string, headers=headers)
              response = conn.getresponse()
              data = response.read().decode('utf-8')
              tweets_data = json.loads(data)
              
              data = []
              seen_ids = set()
              
              if 'data' in tweets_data.keys():
                  for tweet in tweets_data['data']: 
                      
                      if tweet['id'] not in seen_ids: 
                          data.append(tweet)
                          seen_ids.add(tweet['id'])
              
              return data

          def get_tweets_by_time(event, collection_time=1):
              tweet_data = []
              start_time = time.time()
              end_time = start_time + float(collection_time)  # Run for 60 seconds (1 minute)

              while time.time() < end_time:

                  data = get_tweets(event)
                  
                  for tweet in data: 
                      if tweet not in tweet_data:
                          tweet_data.append(tweet)

                  time.sleep(1)  # Wait for 1 second before running again
              
              return tweet_data

          def lambda_handler(event, context):
              EVENT_NAME = event['event_name']
              COLLECTION_TIME = event['collection_time']

              number_of_comments = 0
              number_of_positive = 0
              number_of_negative = 0

              data = get_tweets_by_time(EVENT_NAME, COLLECTION_TIME)

              # Create list of items to add to DynamoDB
              items_to_add = []

              for tweet in data:
                  id = tweet['id']
                  comment = tweet['text']
                  raw_date = tweet['created_at']

                  d = dateutil.parser.parse(raw_date)
                  tweet_date = d.strftime('%m/%d/%Y %H%:M%p')

                  # AWS Comprhend Sentiment Analysis 
                  sentiment = comprehend.detect_sentiment(Text=comment, LanguageCode='en')
                  positive = str(sentiment['SentimentScore']['Positive'])
                  negative = str(sentiment['SentimentScore']['Negative'])

                  #Sentiment Additions
                  if float(positive) > float(negative):
                      number_of_positive += 1
                  else: 
                      number_of_negative += 1

                  #Add the item to the list
                  items_to_add.append({
                      'id': {'N': id},
                      'Comment': {'S': comment}, 
                      'Date': {'S': tweet_date},
                      'PositiveSentiment': {'N': positive},
                      'NegativeSentiment': {'N': negative}
                  })

                  number_of_comments += 1

              # Write the items to the table in batches
              batch_size = 25
              for i in range(0, len(items_to_add), batch_size):
                  batch_items = items_to_add[i:i+batch_size]
                  response = dynamodb.batch_write_item(
                      RequestItems={
                          'ov-database': [{'PutRequest': {'Item': item}} for item in batch_items]
                      }
                  )

              #Calculate postive and negative percentage
              positive_percentage = round(((number_of_positive/number_of_comments) * 100), 2)
              negative_percentage = round(((number_of_negative/number_of_comments) * 100), 2)

              #Generate Response
              response = '\nSentiment Analysis Completed for Event.\nTotal Comments Gathered: {}\nTotal Positive Comments: {} ({}%)\nTotal Negative Comments: {}({}%)'.format(number_of_comments, number_of_positive,positive_percentage, number_of_negative, negative_percentage )
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              logger.info(response)

              return {
                  'statusCode': 200,
                  'body': response, 
                  'POS_PERCENT': positive_percentage
              }
      Timeout: 900
      MemorySize: 512

  
  OVDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ov-database
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits:  100
        WriteCapacityUnits: 100

  OVIAMRole:
    Type: AWS::IAM::Role
    DependsOn: OVDatabase
    Properties:
      RoleName: ov-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ov-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt OVDatabase.Arn
              - Effect: Allow
                Action:
                  - comprehend:DetectSentiment
                Resource: '*'

Outputs:
  AmplifyAppId:
    Value: !Ref Amplify

  ApiGatewayInvokeURL:
    Value: !Sub https://${OtterviewAPI}.execute-api.${AWS::Region}.amazonaws.com/${OtterviewAPIStageName}

  BranchUrl:
    Value: !Sub ${AmplifyBranch.BranchName}.${AmplifyDomain.DomainName}

  DefaultDomain:
    Value: !Sub main.${Amplify.DefaultDomain}

  LambdaArn:
    Value: !GetAtt RetrieveItemsFunction.Arn