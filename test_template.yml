AWSTemplateFormatVersion: 2010-09-09

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Effect: 'Allow'
          Principal: 
            Service: 
              - 'lambda.amazonaws.com'
              - 'comprehend.amazonaws.com'
              - 'apigateway.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ComprehendFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/ComprehendDataAccessRolePolicy'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      RoleName: LambdaRole

  SentimentFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"

  SentimentFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        ZipFile: |
          import boto3
  
          client = boto3.client('comprehend')
          
          def lambda_handler(event, context):
            result = {
              'Sentiment': client.detect_sentiment(Text = event['inputTranscript'], LanguageCode='en')['Sentiment'],
              'SentimentScore': client.detect_sentiment(Text = event['inputTranscript'], LanguageCode='en')['SentimentScore']
            }
            return result
      FunctionName: 'SentimentFunction'
      Handler: index.lambda_handler
      Role: !GetAtt SentimentFunctionRole.Arn
      Runtime: 'python3.9'

  SentimentAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
        - EDGE
      Name: SentimentAPI

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - SentimentAnalysis
    Properties:
      RestApiId: !Ref SentimentAPI
      StageName: dev

  SentimentGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt SentimentAPI.RootResourceId
      PathPart: analysis
      RestApiId: !Ref SentimentAPI

  SentimentAnalysis:
    Type: AWS::ApiGateway::Method
    DependsOn:
    - SentimentLambdaPermission
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':apigateway:'
            - !Ref AWS::Region
            - :lambda:path/2015-03-31/functions/
            - !GetAtt SentimentFunction.Arn
            - /invocations
      ResourceId: !Ref SentimentGatewayResource
      RestApiId: !Ref SentimentAPI

  SentimentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SentimentFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref SentimentAPI
          - /*/*

Outputs:
  ApiUrl:
    Description: URL of the REST API.
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: SentimentAPI
        - .execute-api.
        - Ref: AWS::Region
        - .
        - Ref: AWS::URLSuffix
        - /dev