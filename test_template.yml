AWSTemplateFormatVersion: 2010-09-09

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Effect: 'Allow'
          Principal: 
            Service: 
              - 'lambda.amazonaws.com'
              - 'comprehend.amazonaws.com'
              - 'apigateway.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ComprehendFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/ComprehendDataAccessRolePolicy'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      RoleName: LambdaRole

  SentimentFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties: 
      Code:
        ZipFile: |
          import boto3
  
          client = boto3.client('comprehend')
          
          def lambda_handler(event, context):
            result = {
              'Sentiment': client.detect_sentiment(Text = event['inputTranscript'], LanguageCode='en')['Sentiment'],
              'SentimentScore': client.detect_sentiment(Text = event['inputTranscript'], LanguageCode='en')['SentimentScore']
            }
            return result
      FunctionName: 'SentimentFunction'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: 'python3.9'

  SentimentSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule to trigger SentimentFunction every minute"
      ScheduleExpression: "cron(* * * * ? *)"
      Targets:
        - Arn: !GetAtt SentimentFunction.Arn
          Id: "SentimentFunction"

  SentimentAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
        - REGIONAL
      Name: SentimentAPI

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SentimentAPI
      - SentimentAnalysis
    Properties:
      RestApiId: !Ref SentimentAPI
      StageName: dev

  SentimentGatewayResource:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - SentimentAPI
    Properties:
      ParentId: !GetAtt SentimentAPI.RootResourceId
      PathPart: analysis
      RestApiId: !Ref SentimentAPI

  SentimentAnalysis:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - SentimentGatewayResource
      - SentimentAPI
      - SentimentFunction
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
            application/json : '{"inputTranscript": "I want something"}'
        Type: AWS
        Uri:
          !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':apigateway:'
            - !Ref AWS::Region
            - :lambda:path/2015-03-31/functions/
            - !GetAtt SentimentFunction.Arn
            - /invocations
      MethodResponses:
        - ResponseModels:
            application/json : Empty
          StatusCode: '200'
      ResourceId: !Ref SentimentGatewayResource
      RestApiId: !Ref SentimentAPI

  # THIS STILL DOESN'T WORK
  GWAuth:
    Type: AWS::ApiGateway::Authorizer
    Properties: 
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SentimentFunction.Arn}/invocations"
      RestApiId: !Ref SentimentAPI
      Type: "REQUEST"
      IdentitySource: method.request.header.authorization
      Name: custom_auth

  GWAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SentimentFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SentimentAPI}/authorizers/${GWAuth}"